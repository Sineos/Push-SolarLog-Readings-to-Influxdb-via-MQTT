[
    {
        "id": "5952ea95ac2887b2",
        "type": "mqtt out",
        "z": "1bd0c146dc3f45d5",
        "name": "Push to Mosquitto",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d4c3cd4f.6e14c",
        "_mcu": {
            "mcu": false
        },
        "x": 790,
        "y": 640,
        "wires": []
    },
    {
        "id": "df6b61ef463d49ea",
        "type": "inject",
        "z": "1bd0c146dc3f45d5",
        "name": "Kick http request every 15 sec",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "15",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "_mcu": {
            "mcu": false
        },
        "x": 830,
        "y": 240,
        "wires": [
            [
                "ca88a3a3d47329fa"
            ]
        ]
    },
    {
        "id": "ca88a3a3d47329fa",
        "type": "function",
        "z": "1bd0c146dc3f45d5",
        "name": "Create http request package",
        "func": "msg.headers = {\n    'Content-Length' : '20',\n    'Connection' : 'keep-alive',\n    'Pragma' : 'no-cache', \n    'Cache-Control' : 'no-cache'\n};\nmsg.payload = {\"801\":{\"170\":null}};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "_mcu": {
            "mcu": false
        },
        "x": 820,
        "y": 320,
        "wires": [
            [
                "c3f4ee3f64ac8cf8"
            ]
        ]
    },
    {
        "id": "c3f4ee3f64ac8cf8",
        "type": "http request",
        "z": "1bd0c146dc3f45d5",
        "name": "POST to SolarLog",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "192.168.178.15/getjp",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "_mcu": {
            "mcu": false
        },
        "x": 790,
        "y": 400,
        "wires": [
            [
                "a41d579920df2de1",
                "9775931d7a6f5b9a"
            ]
        ]
    },
    {
        "id": "a41d579920df2de1",
        "type": "debug",
        "z": "1bd0c146dc3f45d5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "_mcu": {
            "mcu": false
        },
        "x": 1010,
        "y": 400,
        "wires": []
    },
    {
        "id": "9775931d7a6f5b9a",
        "type": "function",
        "z": "1bd0c146dc3f45d5",
        "name": "Parse SolarLog JSON",
        "func": "const SolarLogMap = {\n\t'lastUpdateTime': {\n\t\tidentifier: '100',\n\t\tactive: 0,\n\t\ttopic: '',\n\t\tmeasurement: '',\n\t\ttags: {\n\t\t\ttag1: '',\n\t\t\ttag2: ''\n\t\t}\n\t},\n\t'Pac': {\n\t\tidentifier: '101',\n\t\tactive: 1,\n\t\ttopic: '/power/pv/output',\n\t\tmeasurement: 'raw_PVoutput',\n\t\ttags: {\n\t\t\ttag1: '',\n\t\t\ttag2: ''\n\t\t}\n\t},\n\t'Pdc': {\n\t\tidentifier: '102',\n\t\tactive: 0,\n\t\ttopic: '',\n\t\tmeasurement: '',\n\t\ttags: {\n\t\t\ttag1: '',\n\t\t\ttag2: ''\n\t\t}\n\t},\n\t'Uac': {\n\t\tidentifier: '103',\n\t\tactive: 0,\n\t\ttopic: '',\n\t\tmeasurement: '',\n\t\ttags: {\n\t\t\ttag1: '',\n\t\t\ttag2: ''\n\t\t}\n\t},\n\t'Udc': {\n\t\tidentifier: '104',\n\t\tactive: 0,\n\t\ttopic: '',\n\t\tmeasurement: '',\n\t\ttags: {\n\t\t\ttag1: '',\n\t\t\ttag2: ''\n\t\t}\n\t},\n\t'yieldDay': {\n\t\tidentifier: '105',\n\t\tactive: 1,\n\t\ttopic: '/power/pv/yieldDay',\n\t\tmeasurement: 'raw_PVyieldDay',\n\t\ttags: {\n\t\t\ttag1: '',\n\t\t\ttag2: ''\n\t\t}\n\t},\n\t'yieldYesterday': {\n\t\tidentifier: '106',\n\t\tactive: 0,\n\t\ttopic: '',\n\t\tmeasurement: '',\n\t\ttags: {\n\t\t\ttag1: '',\n\t\t\ttag2: ''\n\t\t}\n\t},\n\t'yieldMonth': {\n\t\tidentifier: '107',\n\t\tactive: 0,\n\t\ttopic: '',\n\t\tmeasurement: '',\n\t\ttags: {\n\t\t\ttag1: '',\n\t\t\ttag2: ''\n\t\t}\n\t},\n\t'yieldYear': {\n\t\tidentifier: '108',\n\t\tactive: 0,\n\t\ttopic: '',\n\t\tmeasurement: '',\n\t\ttags: {\n\t\t\ttag1: '',\n\t\t\ttag2: ''\n\t\t}\n\t},\n\t'yieldTotal': {\n\t\tidentifier: '109',\n\t\tactive: 0,\n\t\ttopic: '',\n\t\tmeasurement: '',\n\t\ttags: {\n\t\t\ttag1: '',\n\t\t\ttag2: ''\n\t\t}\n\t},\n\t'consPac': {\n\t\tidentifier: '110',\n\t\tactive: 1,\n\t\ttopic: '/power/pv/consumption',\n\t\tmeasurement: 'raw_PVconsumption',\n\t\ttags: {\n\t\t\ttag1: '',\n\t\t\ttag2: '',\n\t\t\ttag3: ''\n\t\t}\n\t},\n\t'consYieldDay': {\n\t\tidentifier: '111',\n\t\tactive: 1,\n\t\ttopic: '/power/pv/consYieldDay',\n\t\tmeasurement: 'raw_PVconsYieldDay',\n\t\ttags: {\n\t\t\ttag1: '',\n\t\t\ttag2: ''\n\t\t}\n\t},\n\t'consYieldYesterday': {\n\t\tidentifier: '112',\n\t\tactive: 0,\n\t\ttopic: '',\n\t\tmeasurement: '',\n\t\ttags: {\n\t\t\ttag1: '',\n\t\t\ttag2: ''\n\t\t}\n\t},\n\t'consYieldMonth': {\n\t\tidentifier: '113',\n\t\tactive: 0,\n\t\ttopic: '',\n\t\tmeasurement: '',\n\t\ttags: {\n\t\t\ttag1: '',\n\t\t\ttag2: ''\n\t\t}\n\t},\n\t'consYieldYear': {\n\t\tidentifier: '114',\n\t\tactive: 0,\n\t\ttopic: '',\n\t\tmeasurement: '',\n\t\ttags: {\n\t\t\ttag1: '',\n\t\t\ttag2: ''\n\t\t}\n\t},\n\t'consYieldTotal': {\n\t\tidentifier: '115',\n\t\tactive: 0,\n\t\ttopic: '',\n\t\tmeasurement: '',\n\t\ttags: {\n\t\t\ttag1: '',\n\t\t\ttag2: ''\n\t\t}\n\t},\n\t'totalPower': {\n\t\tidentifier: '116',\n\t\tactive: 0,\n\t\ttopic: '',\n\t\tmeasurement: '',\n\t\ttags: {\n\t\t\ttag1: '',\n\t\t\ttag2: ''\n\t\t}\n\t}\n};\n\n// define padding function to be used in timeString2ms\nfunction pad(number, length) {\n\tlet str = String(number);\n\twhile (str.length < length) {\n\t\tstr = '0' + str;\n\t}\n\treturn str;\n}\n\nfunction timeString2ms(SLts) {\n\t// Split the badly formated SolarLog timestamp\n\tSLts = SLts.split(' ');\n\tconst SLts_date = SLts[0].split('.');\n\n\t/*\n   * get local timezone offset since the SolarLog time stamp\n   * does not contain this information and we want to continue in\n   * miliseconds which is no longer aware of the time zone\n   * Note: This assumes that the SolarLog and Node Red instance\n   * are running in the same time zone\n  */\n\tlet offset = new Date().getTimezoneOffset();\n\toffset = ((offset < 0 ? '+' : '-') + pad(parseInt(Math.abs(offset / 60)), 2) + ':' + pad(Math.abs(offset % 60), 2));\n\n\t// Reorder and build new ISOdate time string\n\tconst newDate = '20' + SLts_date[2] + '-' + SLts_date[1] + '-' + SLts_date[0];\n\tconst timeString_new = newDate + 'T' + SLts[1] + offset;\n\n\t// Return time stamp as ms\n\treturn Date.parse(timeString_new);\n}\n\n// http://stackoverflow.com/a/11315561/2001479\n/* repeatString() returns a string which has been repeated a set number of times */\nfunction repeatString(str, num) {\n\tlet out = '';\n\tfor (let i = 0; i < num; i++) {\n\t\tout += str;\n\t}\n\treturn out;\n}\n\n/* JUST FOR DEBUGGING\n// dump() displays the contents of a variable like var_dump() does in PHP. dump() is\n// better than typeof, because it can distinguish between array, null and object.\n// Parameters:\n// v:              The variable\n// howDisplay:     \"none\", \"body\", \"alert\" (default)\n// recursionLevel: Number of times the function has recursed when entering nested\n//                 objects or arrays. Each level of recursion adds extra space to the\n//                 output to indicate level. Set to 0 by default.\n// Return Value:\n// A string of the variable's contents\n// Limitations:\n// Can't pass an undefined variable to dump().\n// dump() can't distinguish between int and float.\n// dump() can't tell the original variable type of a member variable of an object.\n// These limitations can't be fixed because these are *features* of JS. However, dump()\n\nfunction dump(v, howDisplay, recursionLevel) {\n  howDisplay = (typeof howDisplay === 'undefined') ? 'alert' : howDisplay;\n  recursionLevel = (typeof recursionLevel !== 'number') ? 0 : recursionLevel;\n\n\n  const vType = typeof v;\n  let out = vType;\n\n  switch (vType) {\n  case 'number':\n\t// there is absolutely no way in JS to distinguish 2 from 2.0\n\t// so 'number' is the best that you can do. The following doesn't work:\n\t// let er = /^[0-9]+$/;\n\t// if (!isNaN(v) && v % 1 === 0 && er.test(3.0))\n\t//    out = 'int';\n  case 'boolean':\n\tout += ': ' + v;\n\tbreak;\n  case 'string':\n\tout += '(' + v.length + '): \"' + v + '\"';\n\tbreak;\n  case 'object':\n\t//check if null\n\tif (v === null) {\n\t  out = 'null';\n\n\n\t// If using jQuery: if ($.isArray(v))\n\t// If using IE: if (isArray(v))\n\t// this should work for all browsers according to the ECMAScript standard:\n\t} else if (Object.prototype.toString.call(v) === '[object Array]') {\n\t  out = 'array(' + v.length + '): {\\n';\n\t  for (let i = 0; i < v.length; i++) {\n\t\tout += repeatString('   ', recursionLevel) + '   [' + i + ']:  ' +\n\t\t\t\t\t  dump(v[i], 'none', recursionLevel + 1) + '\\n';\n\t  }\n\t  out += repeatString('   ', recursionLevel) + '}';\n\t} else { //if object\n\t  sContents = '{\\n';\n\t  cnt = 0;\n\t  for (const member in v) {\n\t\t//No way to know the original data type of member, since JS\n\t\t//always converts it to a string and no other way to parse objects.\n\t\tsContents += repeatString('   ', recursionLevel) + '   ' + member +\n\t\t\t\t\t  ':  ' + dump(v[member], 'none', recursionLevel + 1) + '\\n';\n\t\tcnt++;\n\t  }\n\t  sContents += repeatString('   ', recursionLevel) + '}';\n\t  out += '(' + cnt + '): ' + sContents;\n\t}\n\tbreak;\n  }\n\n  if (howDisplay == 'body') {\n\tconst pre = document.createElement('pre');\n\tpre.innerHTML = out;\n\tdocument.body.appendChild(pre);\n  } else if (howDisplay == 'alert') {\n\talert(out);\n  }\n\n  return out;\n}\n*/\n\n// Parse SolarLog's JSON string\nlet mySLdata = [];\n\n\n// Sometimes parsing errors pop up\n// Try to figure out why\ntry {\n\tmySLdata = JSON.parse(msg.payload);\n} catch (err) {\n\tnode.warn('Parse Error: ' + err);\n\t// JUST FOR DEBUGGING\n\t// node.warn(\"Error Msg Obj: \" + dump(msg, 'none', 3));\n\treturn null;\n}\n\n\n// Read previous Time Stamp from context\nconst myTimestampOld = context.get('myTimestampOld') || 0;\n\n// Get last update time from SolarLog\n// and convert to ms\nconst myTimestampSL = mySLdata['801']['170']['100'];\nconst myTimestamp = timeString2ms(myTimestampSL);\n\n// Compare current Time Stamp to the context time stamp\n// Continue only if current Time Stamp is newer\nif (myTimestampOld == myTimestamp) {\n\treturn null;\n}\ncontext.set('myTimestampOld', myTimestamp);\n\n\n// Iterate through SolarLogMap and return\n// corresponding values from SolarLog's data\nconst myResults = [];\nfor (const i in SolarLogMap) {\n\tif (SolarLogMap[i]['active']) {\n\t\tconst myTags = [];\n\t\tfor (const ii in SolarLogMap[i]['tags']) {\n\t\t\tif (SolarLogMap[i]['tags'][ii].length > 0) {\n\t\t\t\tmyTags.push(SolarLogMap[i]['tags'][ii]);\n\t\t\t}\n\t\t}\n\t\tconst myTagLine = myTags.join(',');\n\n\t\tconst myTopic = SolarLogMap[i]['topic'];\n\t\tconst myLine1 = SolarLogMap[i]['measurement'] + (myTagLine.length === 0 ? '' : ',' + myTagLine);\n\t\tconst myIdentifier = SolarLogMap[i]['identifier'];\n\t\tconst myLine2 = 'value=' + mySLdata['801']['170'][myIdentifier] + ' ' + (myTimestamp * 1000000);\n\t\tconst myPayload = myLine1 + ' ' + myLine2;\n\n\t\tmyResults.push({ topic: myTopic, payload: myPayload });\n\t}\n}\n\nreturn [myResults];\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "_mcu": {
            "mcu": false
        },
        "x": 800,
        "y": 480,
        "wires": [
            [
                "eaa23f63dfe7051e",
                "f1f66f1cac4e2694"
            ]
        ]
    },
    {
        "id": "eaa23f63dfe7051e",
        "type": "debug",
        "z": "1bd0c146dc3f45d5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "_mcu": {
            "mcu": false
        },
        "x": 1010,
        "y": 480,
        "wires": []
    },
    {
        "id": "f1f66f1cac4e2694",
        "type": "delay",
        "z": "1bd0c146dc3f45d5",
        "name": "Only send one payload each second",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "_mcu": {
            "mcu": false
        },
        "x": 850,
        "y": 560,
        "wires": [
            [
                "5952ea95ac2887b2"
            ]
        ]
    },
    {
        "id": "d4c3cd4f.6e14c",
        "type": "mqtt-broker",
        "z": "1bd0c146dc3f45d5",
        "name": "",
        "broker": "192.168.178.8",
        "port": "1883",
        "clientid": "node_red",
        "autoConnect": true,
        "usetls": false,
        "verifyservercert": true,
        "compatmode": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": null,
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": null,
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    }
]
